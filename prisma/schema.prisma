// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// npx prisma migrate dev --create-only

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SUBUSER
  MASTER
  ADMIN
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  username        String?           @unique
  password        String
  role            Role              @default(USER)
  isEmailVerified Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  forgotToken     String?
  avatar          String?
  rate            Int               @default(0)
  userTokens      userAuthTokens[]
  IntuitionPack   IntuitionPack[]
  IntuitionResult IntuitionResult[]
  CastPack        CastPack[]
  CastResult      CastResult[]
  RoomUser        RoomUsers[]
  QuizPack        QuizPack[]
  QuizResult      QuizResult[]
}

model userAuthTokens {
  id           Int      @id @default(autoincrement())
  user_id      Int
  user         User     @relation(fields: [user_id], references: [id])
  refreshToken String?
  accessToken  String?
  ua           String?
  fingerprint  String?
  ip           String?
  expiresIn    BigInt
  createdAt    DateTime @default(now())
}

model Movie {
  id       Int     @id @default(autoincrement())
  title    String
  origin   String
  director String
  year     Int
  country  String?
  type     String?
  image    String?

  cast            Cast[]
  library         Library[]
  castPack        CastPack[]
  CastPackContent CastPackContent[]
}

model Person {
  id     Int     @id @default(autoincrement())
  name   String
  role   String
  avatar String?

  cast                 Cast[]
  library              Library[]
  IntuitionPackContent IntuitionPackContent[]
}

model Cast {
  id        Int @id @default(autoincrement())
  person_id Int
  movie_id  Int

  person Person @relation(fields: [person_id], references: [id])
  movie  Movie  @relation(fields: [movie_id], references: [id])
}

model Library {
  id             Int     @id @default(autoincrement())
  word           String
  type           String
  translation    String?
  additionalData String?
  person_id      Int?
  movie_id       Int?

  movie  Movie?  @relation(fields: [movie_id], references: [id])
  person Person? @relation(fields: [person_id], references: [id])
  QuizPackRounds              QuizPackRound[]
}

model Link {
  id  Int    @id @default(autoincrement())
  url String
}

model IntuitionPack {
  id        Int      @id @default(autoincrement())
  name      String
  logo      String?
  fakeActor String?
  enable    Boolean? @default(true)

  user_id              Int
  user                 User                   @relation(fields: [user_id], references: [id])
  createdAt            DateTime               @default(now())
  IntuitionPackContent IntuitionPackContent[]
  IntuitionResult      IntuitionResult[]
}

model IntuitionPackContent {
  id        Int     @id @default(autoincrement())
  avatar    String?
  year      String?
  character String?
  actorName String?
  text      String?
  movie     String?

  actor_id Int
  actror   Person        @relation(fields: [actor_id], references: [id])
  pack_id  Int
  pack     IntuitionPack @relation(fields: [pack_id], references: [id])
}

model IntuitionResult {
  id    Int     @id @default(autoincrement())
  value Int
  log   String?
  time  Int?

  user_id   Int
  user      User          @relation(fields: [user_id], references: [id])
  pack_id   Int
  pack      IntuitionPack @relation(fields: [pack_id], references: [id])
  createdAt DateTime      @default(now())
}

model CastPack {
  id     Int      @id @default(autoincrement())
  name   String
  logo   String?
  enable Boolean? @default(true)

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  CastPackContent CastPackContent[]
  CastResult      CastResult[]

  createdAt DateTime @default(now())
  Movie     Movie?   @relation(fields: [movieId], references: [id])
  movieId   Int?
}

model CastPackContent {
  id     Int     @id @default(autoincrement())
  actor1 String?
  actor2 String?
  actor3 String?
  actor4 String?
  actor5 String?
  actor6 String?
  actor7 String?
  actor8 String?

  movie_id Int
  movie    Movie    @relation(fields: [movie_id], references: [id])
  pack_id  Int
  pack     CastPack @relation(fields: [pack_id], references: [id])
}

model CastResult {
  id    Int     @id @default(autoincrement())
  value Float
  log   String?
  time  Int?

  user_id   Int
  user      User     @relation(fields: [user_id], references: [id])
  pack_id   Int
  pack      CastPack @relation(fields: [pack_id], references: [id])
  createdAt DateTime @default(now())
}

model Room {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  name      String?
  info      String?
  entity_id Int
  type      String @default("user")
  @@unique([ entity_id, type])
  pack_id   Int?
  question  Int     @default(0)
  time      Int     @default(0)
  isActive   Boolean @default(false)

  RoomUser        RoomUsers[]
  pack      QuizPack? @relation(fields: [pack_id], references: [id])

  createdAt DateTime @default(now())
}

model RoomUsers {
  id        Int      @id @default(autoincrement())
  user_id   Int
  room_id   Int
  socket_id String
  isActive  Boolean  @default(false)
  isReady   Boolean  @default(false)
  isAdmin   Boolean  @default(false)

  score     Float    @default(0)
  data      String?

  room      Room     @relation(fields: [room_id], references: [id])
  user      User     @relation(fields: [user_id], references: [id])
}



model QuizPack {
  id     Int      @id @default(autoincrement())
  name   String
  logo   String?
  enable Boolean? @default(true)

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  QuizPackRound QuizPackRound[]
  QuizResult      QuizResult[]
  Rooms      Room[]

  createdAt DateTime @default(now())
}

model QuizPackRound {
  id        Int     @id @default(autoincrement())
  number    Int
  score     Int
  time      Int
  text      String?
  image     String?
  audio     String?
  video     String?
  type      String  @default("text")
  libraryType  String  @default("movie")

  answer_id   Int?
  pack_id     Int
  answer      Library?   @relation(fields: [answer_id], references: [id])
  pack        QuizPack @relation(fields: [pack_id], references: [id])
}

model QuizResult {
  id      Int     @id @default(autoincrement())
  points   Float
  log     String?
  time    Int?
  question  Int
  answer  String?
  type    String   @default("question")

  user_id   Int
  user      User     @relation(fields: [user_id], references: [id])
  pack_id   Int
  pack      QuizPack @relation(fields: [pack_id], references: [id])
  createdAt DateTime @default(now())
}